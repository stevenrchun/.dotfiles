-- Source vimrc
vim.cmd("source ~/.vimrc")

-- Persistent Undo
vim.opt.undofile = true

-- Use new osc52 support in neovim
-- vim.g.clipboard = {
--   name = 'OSC 52',
--   copy = {
--     ['+'] = require('vim.ui.clipboard.osc52').copy('+'),
--     ['*'] = require('vim.ui.clipboard.osc52').copy('*'),
--   },
--   paste = {
--     ['+'] = require('vim.ui.clipboard.osc52').paste('+'),
--     ['*'] = require('vim.ui.clipboard.osc52').paste('*'),
--   },
-- }

-- Smooth Scroll
require("neoscroll").setup({
	easing_function = "quadratic",
	mappings = { "<C-u>", "<C-d>" },
})

-- Fidget notifications
require("fidget").setup({
	-- options
})

-- Notify if code action available
require("nvim-lightbulb").setup({
	autocmd = { enabled = true },
	virtual_text = { enabled = true },
	sign = { enabled = false },
})

-- Treesitter configs
require("nvim-treesitter.configs").setup({
	-- A list of parser names, or "all" (the five listed parsers should always be installed)
	ensure_installed = { "c", "lua", "vim", "vimdoc", "query", "kotlin", "java" },

	-- Install parsers synchronously (only applied to `ensure_installed`)
	sync_install = false,

	-- Automatically install missing parsers when entering buffer
	-- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
	auto_install = false,

	-- List of parsers to ignore installing (or "all")
	ignore_install = {},

	---- If you need to change the installation directory of the parsers (see -> Advanced Setup)
	-- parser_install_dir = "/some/path/to/store/parsers", -- Remember to run vim.opt.runtimepath:append("/some/path/to/store/parsers")!

	highlight = {
		enable = true,

		-- NOTE: these are the names of the parsers and not the filetype. (for example if you want to
		-- disable highlighting for the `tex` filetype, you need to include `latex` in this list as this is
		-- the name of the parser)
		-- list of language that will be disabled
		disable = {},
		-- Or use a function for more flexibility, e.g. to disable slow treesitter highlight for large files

		-- Setting this to true will run `:h syntax` and tree-sitter at the same time.
		-- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
		-- Using this option may slow down your editor, and you may see some duplicate highlights.
		-- Instead of true it can also be a list of languages
		additional_vim_regex_highlighting = false,
	},
})

-- Formatting with Conform
local slow_format_filetypes = {}
require("conform").setup({
	formatters_by_ft = {
		kotlin = { "ktlint" },
		javascript = { "prettierd" },
		html = { "superhtml" },
    python = { "ruff_format" }
	},
	-- Automatically detects slow formatters and runs them aysnc
	format_on_save = function(bufnr)
		if slow_format_filetypes[vim.bo[bufnr].filetype] then
			return
		end
		local function on_format(err)
			if err and err:match("timeout$") then
				slow_format_filetypes[vim.bo[bufnr].filetype] = true
			end
		end

		return { timeout_ms = 500, lsp_fallback = false }, on_format
	end,

	format_after_save = function(bufnr)
		if not slow_format_filetypes[vim.bo[bufnr].filetype] then
			return
		end
		return { lsp_fallback = false }
	end,
})

-- Avante config
-- require('avante_lib').load()
-- require('avante').setup ({
--   -- Your config here!
-- })

-- LSP Configs.
-- Note: still installing the binaries manually.
local lspconfig = require("lspconfig")
lspconfig.ts_ls.setup({})
lspconfig.superhtml.setup({})
lspconfig.pyright.setup({})
vim.lsp.config('kotlin_lsp', {
  cmd = {
    '/usr/local/google/home/stevenchun/lsp-servers/kotlin-0.253.10629/kotlin-lsp.sh',
    '--stdio',
  },
  filetypes = { 'kotlin' },
  root_markers = {
    'WORKSPACE.bazel'
  }
})
vim.lsp.enable('kotlin_lsp')

vim.lsp.set_log_level("INFO")

-- Personal Reference
-- Get server startup messages
-- lua =vim.lsp.util.get_progress_messages()[1]

-- This works! Try =vim.lsp.buf.definition()
-- vim.api.nvim_create_autocmd("FileType", {
-- 	desc = "Setup local kotlin LSP on kotlin filetype",
-- 	pattern = "kotlin",
-- 	group = vim.api.nvim_create_augroup("kotlin_lsp_local", { clear = true }),
-- 	callback = function(opts)
-- 		local id = vim.lsp.start({
-- 			name = "kotlin-language-server",
-- 			-- .bash_profile adds the locally built kotlin-language-server to path
-- 			cmd = {
-- 				"/Users/steven/projects/kotlin-language-server/server/build/install/server/bin/kotlin-language-server",
-- 			},
-- 			filetypes = {
-- 				"kotlin", -- filetype generated by kotlin-vim
-- 			},
-- 			root_dir = vim.fs.dirname(
-- 				vim.fs.find({ "WORKSPACE.bazel", "WORKSPACE", "settings.gradle", ".gitignore" }, { upward = true })[1]
-- 			),
-- 			init_options = {
-- 				storagePath = vim.fs.dirname(
-- 					vim.fs.find({ "WORKSPACE.bazel", "WORKSPACE", "settings.gradle", ".gitignore" }, { upward = true })[1]
-- 				),
-- 				additionalSourceExclusions = { "beepus", "bingus" },
-- 			},
-- 			settings = {
-- 				kotlin = {
-- 					scripts = {
-- 						enabled = false,
-- 					},
-- 					completion = {
-- 						snippets = {
-- 							enabled = true,
-- 						},
-- 					},
-- 				},
-- 			},
-- 		})
-- 		-- Required to actual attach the server to the buffer that triggered the FileType event.
-- 		vim.lsp.buf_attach_client(opts.buf, id)
-- 	end,
-- })

-- Autocomplete via COQ
-- Unbind coq jump to mark.
vim.g.coq_settings = {
	keymap = {
		jump_to_mark = "",
	},
	auto_start = "shut-up",
	clients = {
		lsp = {
			always_on_top = {},
			resolve_timeout = 1,
		},
	},
	limits = {
		completion_auto_timeout = 1,
	},
}

-- Keymaps
-- Mapping to yank to system keyboard (both star and plus).
-- Note for some reason this only works in TMUX, otherwise it appears
-- a lack of a clipboard provider means that + doesn't exist.
vim.keymap.set("v", "Y", '"+y')

-- osc52 yanks to 0, so use that to paste as well. Probably a hack.
-- Okay so outside tmux it yanks to +
-- And inside tmux it yanks to 0.
--vim.keymap.set('n', 'p', '"0p')

-- By default neovim remaps are non-recursive, but we want that behavior
-- so we add remap = true
vim.keymap.set("n", "<S-j>", "<C-d>", { remap = true })
vim.keymap.set("n", "<S-k>", "<C-u>", { remap = true })

-- LSP Remaps
-- go in
vim.keymap.set("n", "gi", vim.lsp.buf.definition)
-- get help
vim.keymap.set("n", "gh", vim.lsp.buf.hover)
-- get references
vim.keymap.set("n", "gr", vim.lsp.buf.references)
-- get fix
vim.keymap.set("n", "gf", vim.lsp.buf.code_action)
-- refactor rename
vim.keymap.set("n", "rr", vim.lsp.buf.rename)
-- get error
vim.keymap.set("n", "ge", vim.diagnostic.open_float)
-- get list (of errors)
vim.keymap.set("n", "gl", vim.diagnostic.setqflist)

vim.cmd[[colorscheme molokai]]
