-- Source vimrc
vim.cmd("source ~/.vimrc")

-- Persistent Undo
vim.opt.undofile = true

-- Use new osc52 support in neovim
-- vim.g.clipboard = {
--   name = 'OSC 52',
--   copy = {
--     ['+'] = require('vim.ui.clipboard.osc52').copy('+'),
--     ['*'] = require('vim.ui.clipboard.osc52').copy('*'),
--   },
--   paste = {
--     ['+'] = require('vim.ui.clipboard.osc52').paste('+'),
--     ['*'] = require('vim.ui.clipboard.osc52').paste('*'),
--   },
-- }

-- Smooth Scroll
require("neoscroll").setup({
	easing_function = "quadratic",
	mappings = { "<C-u>", "<C-d>" },
})

require("fidget").setup({
	-- options
})

-- LSP Configs.
-- Note: still installing the binaries manually.
local lspconfig = require("lspconfig")
lspconfig.tsserver.setup({})
require("lspconfig").tsserver.setup({})

vim.lsp.set_log_level("INFO")

-- Personal Reference
-- Get server startup messages
-- lua =vim.lsp.util.get_progress_messages()[1]

-- This works! Try =vim.lsp.buf.definition()
vim.api.nvim_create_autocmd("FileType", {
	desc = "Setup local kotlin LSP on kotlin filetype",
	pattern = "kotlin",
	group = vim.api.nvim_create_augroup("kotlin_lsp_local", { clear = true }),
	callback = function(opts)
		local id = vim.lsp.start({
			name = "kotlin-language-server",
			-- .bash_profile adds the locally built kotlin-language-server to path
			cmd = {
				"/Users/steven/projects/kotlin-language-server/server/build/install/server/bin/kotlin-language-server",
			},
			filetypes = {
				"kotlin", -- filetype generated by kotlin-vim
			},
			root_dir = vim.fs.dirname(
				vim.fs.find({ "WORKSPACE.bazel", "WORKSPACE", "settings.gradle", ".gitignore" }, { upward = true })[1]
			),
			init_options = {
				storagePath = vim.fs.dirname(
					vim.fs.find({ "WORKSPACE.bazel", "WORKSPACE", "settings.gradle", ".gitignore" }, { upward = true })[1]
				),
				additionalSourceExclusions = { "beepus", "bingus" },
			},
			settings = {
				kotlin = {
					scripts = {
						enabled = false,
					},
					completion = {
						snippets = {
							enabled = true,
						},
					},
				},
			},
		})
		-- Required to actual attach the server to the buffer that triggered the FileType event.
		vim.lsp.buf_attach_client(opts.buf, id)
	end,
})

-- Autocomplete via COQ
-- Unbind coq jump to mark.
vim.g.coq_settings = {
	keymap = {
		jump_to_mark = "",
	},
	auto_start = "shut-up",
	clients = {
		lsp = {
			always_on_top = {},
			resolve_timeout = 1,
		},
	},
	limits = {
		completion_auto_timeout = 1,
	},
}

-- Keymaps
-- Mapping to yank to system keyboard (both star and plus).
-- Note for some reason this only works in TMUX, otherwise it appears
-- a lack of a clipboard provider means that + doesn't exist.
vim.keymap.set("v", "Y", '"+y')

-- osc52 yanks to 0, so use that to paste as well. Probably a hack.
-- Okay so outside tmux it yanks to +
-- And inside tmux it yanks to 0.
--vim.keymap.set('n', 'p', '"0p')

-- By default neovim remaps are non-recursive, but we want that behavior
-- so we add remap = true
vim.keymap.set("n", "<S-j>", "<C-d>", { remap = true })
vim.keymap.set("n", "<S-k>", "<C-u>", { remap = true })

-- LSP Remaps
vim.keymap.set("n", "gi", vim.lsp.buf.definition)
vim.keymap.set("n", "gh", vim.lsp.buf.hover)
vim.keymap.set("n", "gr", vim.lsp.buf.references)
vim.keymap.set("n", "rr", vim.lsp.buf.rename)
vim.keymap.set("n", "ge", vim.diagnostic.open_float)
